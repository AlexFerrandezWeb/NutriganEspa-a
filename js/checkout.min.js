document.addEventListener("DOMContentLoaded",function(){const carrito=JSON.parse(localStorage.getItem("carrito"))||[];const resumenProductos=document.getElementById("resumenProductos");let subtotal=0;carrito.forEach(producto=>{const productoElement=document.createElement("div");productoElement.className="producto-resumen";const precioFinal=parseFloat(producto.precioFinal||producto.precio);const subtotalProducto=precioFinal*producto.cantidad;subtotal+=subtotalProducto;productoElement.innerHTML=`
    <p>${producto.nombre} x ${producto.cantidad}</p>
    <p>${precioFinal.toFixed(2)}€</p>
    <p>${subtotalProducto.toFixed(2)}€</p>
`;resumenProductos.appendChild(productoElement)});const envio=0;const total=subtotal+envio;document.getElementById("subtotal").textContent=`${subtotal.toFixed(2)}€`;document.getElementById("envio").innerHTML='<span style="color: #4CAF50;">Gratis</span>';document.getElementById("total").textContent=`${total.toFixed(2)}€`;const metodosPago=document.querySelectorAll('input[name="metodoPago"]');const tarjetaForm=document.getElementById("tarjetaForm");metodosPago.forEach(metodo=>{metodo.addEventListener("change",function(){if(this.value==="tarjeta"){tarjetaForm.classList.remove("hidden");tarjetaForm.classList.add("visible")}else{tarjetaForm.classList.remove("visible");tarjetaForm.classList.add("hidden")}})});const form=document.querySelector(".checkout-form");form.addEventListener("submit",function(e){e.preventDefault();if(validarFormulario()){procesarPedido()}})});function validarFormulario(){let esValido=true;const formGroups=document.querySelectorAll(".form-group");formGroups.forEach(group=>{const input=group.querySelector("input");const errorMessage=group.querySelector(".error-message");if(input.required&&!input.value.trim()){group.classList.add("error");esValido=false}else if(input.type==="email"&&!validarEmail(input.value)){group.classList.add("error");esValido=false}else{group.classList.remove("error")}});return esValido}function validarEmail(email){const re=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return re.test(email)}function calcularEnvio(){const codigoPostal=document.getElementById("codigoPostal").value;const envioElement=document.getElementById("envio");if(!codigoPostal){envioElement.innerHTML='<span style="color: #4CAF50;">Gratis</span>';actualizarTotal();return}const esPeninsula=/^(0[1-9]|[1-4][0-9]|5[0-2])/.test(codigoPostal);if(esPeninsula){envioElement.innerHTML='<span style="color: #4CAF50;">Gratis</span>'}else{envioElement.textContent="5.99 €"}actualizarTotal()}function actualizarTotal(){const carrito=JSON.parse(localStorage.getItem("carrito"))||[];let subtotal=0;carrito.forEach(producto=>{const precioFinal=parseFloat(producto.precioFinal||producto.precio);subtotal+=precioFinal*producto.cantidad});const envio=document.getElementById("envio").textContent==="Gratis"?0:parseFloat(document.getElementById("envio").textContent.replace("€","").trim());const total=subtotal+envio;document.getElementById("subtotal").textContent=`${subtotal.toFixed(2)}€`;document.getElementById("total").textContent=`${total.toFixed(2)}€`}function validarTarjeta(numero){numero=numero.replace(/\s+/g,"").replace(/-/g,"");if(!/^\d+$/.test(numero))return false;let suma=0;let doble=false;for(let i=numero.length-1;i>=0;i--){let digito=parseInt(numero.charAt(i));if(doble){digito*=2;if(digito>9)digito-=9}suma+=digito;doble=!doble}return suma%10===0}function validarFechaExpiracion(fecha){const[mes,año]=fecha.split("/");const ahora=new Date;const añoActual=ahora.getFullYear()%100;const mesActual=ahora.getMonth()+1;return/^\d{2}\/\d{2}$/.test(fecha)&&parseInt(mes)>=1&&parseInt(mes)<=12&&(parseInt(año)>añoActual||parseInt(año)===añoActual&&parseInt(mes)>=mesActual)}function validarCVV(cvv){return/^\d{3,4}$/.test(cvv)}function mostrarModalConfirmacion(pedido){const modal=document.createElement("div");modal.className="modal-confirmacion";modal.innerHTML=`
<div class="modal-contenido">
    <h2>¡Pedido Confirmado!</h2>
    <p>Número de pedido: ${pedido.numeroPedido}</p>
    <div class="resumen-pedido">
        <h3>Resumen del Pedido</h3>
        <div class="productos-resumen">
            ${pedido.productos.map(p=>{const precioFinal=parseFloat(p.precioFinal||p.precio);const subtotal=precioFinal*p.cantidad;return`
                    <div class="producto-resumen">
                        <span>${p.nombre}</span>
                        <span>${p.cantidad} x ${precioFinal.toFixed(2)}€</span>
                        <span>${subtotal.toFixed(2)}€</span>
                    </div>
                `}).join("")}
        </div>
        <div class="total-resumen">
            <span>Total:</span>
            <span>${pedido.total}€</span>
        </div>
    </div>
    <p>Tu pedido será enviado a través de Correo Express.</p>
    <button onclick="cerrarModal()">Aceptar</button>
</div>
`;document.body.appendChild(modal)}function cerrarModal(){const modal=document.querySelector(".modal-confirmacion");if(modal){modal.remove();window.location.href="index.html"}}function procesarPedido(){const carrito=JSON.parse(localStorage.getItem("carrito"))||[];let subtotal=0;carrito.forEach(producto=>{const precioFinal=parseFloat(producto.precioFinal||producto.precio);subtotal+=precioFinal*producto.cantidad});const envio=parseFloat(document.getElementById("envio").textContent.replace("€","").trim());const total=subtotal+envio;const pedido={numeroPedido:"NUT"+Math.floor(Math.random()*1e6).toString().padStart(6,"0"),productos:carrito,total:total.toFixed(2)+"€",fecha:(new Date).toLocaleDateString(),metodoPago:document.querySelector('input[name="metodoPago"]:checked').value};mostrarModalConfirmacion(pedido);localStorage.removeItem("carrito")}document.getElementById("codigoPostal")?.addEventListener("input",calcularEnvio);function actualizarProgreso(paso){const pasos=document.querySelectorAll(".paso");pasos.forEach((p,index)=>{if(index<paso){p.classList.add("completado");p.classList.add("activo")}else if(index===paso){p.classList.add("activo");p.classList.remove("completado")}else{p.classList.remove("activo");p.classList.remove("completado")}})}const style=document.createElement("style");style.textContent=`
.paso.completado .numero {
background: #4CAF50;
color: white;
}
.paso.completado .texto {
color: #4CAF50;
}
`;document.head.appendChild(style);document.getElementById("checkoutForm")?.addEventListener("input",function(){const nombre=document.getElementById("nombre").value;const email=document.getElementById("email").value;const direccion=document.getElementById("direccion").value;if(nombre&&email&&direccion){actualizarProgreso(1)}});document.querySelectorAll('input[name="metodoPago"]').forEach(input=>{input.addEventListener("change",function(){if(this.value==="tarjeta"){const numeroTarjeta=document.getElementById("numeroTarjeta").value;const fechaExpiracion=document.getElementById("fechaExpiracion").value;const cvv=document.getElementById("cvv").value;if(numeroTarjeta&&fechaExpiracion&&cvv){actualizarProgreso(2)}}else{actualizarProgreso(2)}})});

// Integración con Stripe
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar Stripe con la clave pública de prueba
    const stripe = Stripe('pk_test_51QATRLCliuoc4d4YBAwi0Ey0ckFiXDoR23g3bHZ1OtgTuhkPEFwdyceMu2V1JkSwe55FFmmjzTcbVeYbKsiYerHe00BrJJykki', {
        apiVersion: '2023-10-16',
        locale: 'es'
    });
    
    const elements = stripe.elements();
    
    // Crear el elemento de tarjeta
    const card = elements.create('card', {
        style: {
            base: {
                fontSize: '16px',
                color: '#32325d',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#dc3545',
                iconColor: '#dc3545'
            }
        },
        hidePostalCode: true
    });
    
    // Montar el elemento de tarjeta en el contenedor
    const cardElement = document.getElementById('card-element');
    if (cardElement) {
        card.mount('#card-element');
    } else {
        console.error('Elemento de tarjeta no encontrado');
    }
    
    // Manejar errores de validación de tarjeta
    card.addEventListener('change', function(event) {
        const displayError = document.getElementById('card-errors');
        if (displayError) {
            if (event.error) {
                displayError.textContent = event.error.message;
                displayError.style.display = 'block';
            } else {
                displayError.textContent = '';
                displayError.style.display = 'none';
            }
        }
    });

    // Obtener elementos del formulario
    const checkoutForm = document.getElementById('checkoutForm');
    const paymentMethods = document.querySelectorAll('input[name="metodoPago"]');
    const tarjetaForm = document.getElementById('tarjetaForm');
    const contrareembolsoForm = document.getElementById('contrareembolsoForm');
    
    if (!checkoutForm || !paymentMethods || !tarjetaForm || !contrareembolsoForm) {
        console.error('Elementos del formulario no encontrados');
        return;
    }

    // Mostrar/ocultar formularios según el método de pago seleccionado
    paymentMethods.forEach(method => {
        method.addEventListener('change', function() {
            const selectedMethod = this.value;
            
            // Ocultar todos los formularios primero
            tarjetaForm.style.display = 'none';
            contrareembolsoForm.style.display = 'none';
            
            // Mostrar el formulario correspondiente
            switch(selectedMethod) {
                case 'tarjeta':
                    tarjetaForm.style.display = 'block';
                    break;
                case 'contrareembolso':
                    contrareembolsoForm.style.display = 'block';
                    break;
            }
        });
    });

    // Validación del formulario
    checkoutForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            const metodoPago = document.querySelector('input[name="metodoPago"]:checked');
            if (!metodoPago) {
                throw new Error('Por favor, selecciona un método de pago');
            }

            const formData = new FormData(checkoutForm);
            const datosPago = Object.fromEntries(formData.entries());

            mostrarCargando();
            
            switch(metodoPago.value) {
                case 'tarjeta':
                    await procesarPagoTarjeta(datosPago);
                    break;
                case 'contrareembolso':
                    await procesarContrareembolso(datosPago);
                    break;
                default:
                    throw new Error('Método de pago no válido');
            }
        } catch (error) {
            console.error('Error en el procesamiento del pago:', error);
            mostrarError(error.message || 'Ha ocurrido un error al procesar el pago');
        } finally {
            ocultarCargando();
        }
    });

    // Funciones auxiliares
    function mostrarCargando() {
        const cargando = document.createElement('div');
        cargando.className = 'cargando';
        cargando.innerHTML = '<div class="spinner"></div><p>Procesando pago...</p>';
        document.body.appendChild(cargando);
    }

    function ocultarCargando() {
        const cargando = document.querySelector('.cargando');
        if (cargando) {
            cargando.remove();
        }
    }

    function mostrarError(mensaje) {
        const errorDiv = document.getElementById('card-errors');
        if (errorDiv) {
            errorDiv.textContent = mensaje;
            errorDiv.style.display = 'block';
            errorDiv.classList.add('error-mensaje');
            
            // Ocultar el mensaje después de 5 segundos
            setTimeout(() => {
                errorDiv.style.display = 'none';
                errorDiv.classList.remove('error-mensaje');
            }, 5000);
        }
    }

    // Función para procesar pago con tarjeta
    async function procesarPagoTarjeta(datos) {
        try {
            console.log('Iniciando procesamiento de pago...');
            
            const { token, error } = await stripe.createToken(card);
            
            if (error) {
                console.error('Error al crear token:', error);
                throw new Error(error.message);
            }

            console.log('Token creado exitosamente:', token.id);
            mostrarCargando();
            
            const total = calcularTotal();
            console.log('Total a cobrar:', total);
            
            const url = 'http://localhost:3000/api/procesar-pago';
            console.log('Enviando solicitud a:', url);
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    token: token.id,
                    amount: total,
                    currency: 'eur'
                })
            });

            console.log('Respuesta recibida:', response.status, response.statusText);

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                console.error('Error en la respuesta:', errorData);
                throw new Error(errorData.message || `Error HTTP: ${response.status}`);
            }

            const result = await response.json();
            console.log('Resultado del pago:', result);
            
            if (!result.success) {
                throw new Error(result.message || 'Error al procesar el pago');
            }

            // Guardar el ID del pedido en localStorage
            localStorage.setItem('ultimoPedido', JSON.stringify({
                id: result.pedidoId,
                fecha: new Date().toISOString()
            }));

            window.location.href = '/pago-exitoso.html';
        } catch (error) {
            console.error('Error en el procesamiento del pago:', error);
            mostrarError(error.message || 'Ha ocurrido un error al procesar el pago');
            throw error;
        } finally {
            ocultarCargando();
        }
    }

    // Función para calcular el total
    function calcularTotal() {
        const totalElement = document.getElementById('total');
        if (totalElement) {
            const total = parseFloat(totalElement.textContent.replace('€', '').replace(',', '.').trim());
            return Math.round(total * 100); // Convertir a céntimos
        }
        return 0;
    }
});